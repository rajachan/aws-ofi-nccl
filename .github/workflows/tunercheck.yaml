name: Build Checks

on: [push, pull_request]

permissions:
  contents: read
  pull-requests: read

env:
  CUDA_KEYRING_URL: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
  EFA_INSTALLER_URL: https://efa-installer.amazonaws.com/aws-efa-installer-latest.tar.gz

jobs:
  tuner-decisions-check:
    strategy:
      matrix:
        platform: [p5en.48xlarge, p5.48xlarge]
      # Add fail-fast: false to continue with other platforms if one fails
      fail-fast: false

    runs-on: ubuntu-22.04

    steps:
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/cuda
            /opt/amazon
          key: ${{ runner.os }}-deps-${{ hashFiles('**/configure.ac') }}

      - name: Install System Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          sudo apt-key del 7fa2af80
          wget ${{ env.CUDA_KEYRING_URL }}
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get install -y cuda-toolkit libhwloc-dev
          pip install uv

      - name: Install EFA
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          curl -O ${{ env.EFA_INSTALLER_URL }}
          tar -xf aws-efa-installer-*.tar.gz
          cd aws-efa-installer/
          sudo ./efa_installer.sh -y --skip-kmod

      - uses: actions/checkout@v4

      - name: Build Plugin
        env:
          MAKEFLAGS: "-j$(nproc)"
        run: |
          ./autogen.sh
          ./configure \
            --with-mpi=/opt/amazon/openmpi \
            --with-libfabric=/opt/amazon/efa \
            --with-cuda=/usr/local/cuda/ \
            --enable-platform-aws \
            --prefix=$PWD/install
          make
          make install

      - name: Check Decisions
        env:
          OFI_NCCL_FORCE_PRODUCT_NAME: ${{ matrix.platform }}
        run: |
          uv run --directory contrib/python show-tuner-decisions \
            ../../install/lib/libnccl-ofi-tuner.so \
            --min-ranks-per-node 1 \
            --max-ranks-per-node 8 \
            --min-nnodes 16 \
            --max-nnodes 64
