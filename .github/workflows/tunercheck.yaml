name: Build Checks

on: [push, pull_request]

permissions:
  contents: read
  pull-requests: read

env:
  CUDA_KEYRING_URL: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
  EFA_INSTALLER_URL: https://efa-installer.amazonaws.com/aws-efa-installer-latest.tar.gz

jobs:
  tuner-decisions-check:
    strategy:
      matrix:
        platform: [p5en.48xlarge, p5.48xlarge]
      fail-fast: false

    runs-on: ubuntu-22.04

    steps:
      # Cache APT packages
      - name: Cache APT packages
        id: cache-apt
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: apt-${{ runner.os }}-${{ hashFiles('**/workflow.yml') }}

      # Cache CUDA installation
      - name: Cache CUDA
        id: cache-cuda
        uses: actions/cache@v3
        with:
          path: |
            /usr/local/cuda
          key: cuda-${{ runner.os }}-${{ hashFiles('**/cuda-keyring_1.1-1_all.deb') }}

      # Cache EFA installation
      - name: Cache EFA
        id: cache-efa
        uses: actions/cache@v3
        with:
          path: |
            /opt/amazon
          key: efa-${{ runner.os }}-${{ hashFiles('**/aws-efa-installer-latest.tar.gz') }}

      # Cache pip packages
      - name: Cache pip packages
        id: cache-pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt', '**/setup.py') }}

      - name: Setup APT
        run: |
          sudo apt-key del 7fa2af80
          wget ${{ env.CUDA_KEYRING_URL }}
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update

      - name: Install System Dependencies
        run: |
          # Only download without installing if we have cache
          if [ "${{ steps.cache-apt.outputs.cache-hit }}" = "true" ]; then
            sudo apt-get install -y --download-only cuda-toolkit libhwloc-dev
          else
            sudo apt-get install -y cuda-toolkit libhwloc-dev
          fi
          
          # Install from cache if available
          sudo apt-get install -y cuda-toolkit libhwloc-dev

      - name: Install Python Dependencies
        run: |
          pip install uv

      - name: Install EFA
        if: steps.cache-efa.outputs.cache-hit != 'true'
        run: |
          curl -O ${{ env.EFA_INSTALLER_URL }}
          tar -xf aws-efa-installer-*.tar.gz
          cd aws-efa-installer/
          sudo ./efa_installer.sh -y --skip-kmod

      - uses: actions/checkout@v4

      - name: Build Plugin
        env:
          MAKEFLAGS: "-j$(nproc)"
        run: |
          ./autogen.sh
          ./configure \
            --with-mpi=/opt/amazon/openmpi \
            --with-libfabric=/opt/amazon/efa \
            --with-cuda=/usr/local/cuda/ \
            --enable-platform-aws \
            --prefix=$PWD/install
          make
          make install

      - name: Check Decisions
        env:
          OFI_NCCL_FORCE_PRODUCT_NAME: ${{ matrix.platform }}
        run: |
          uv run --directory contrib/python show-tuner-decisions \
            ../../install/lib/libnccl-ofi-tuner.so \
            --min-ranks-per-node 1 \
            --max-ranks-per-node 8 \
            --min-nnodes 16 \
            --max-nnodes 64
